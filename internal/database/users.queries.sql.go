// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.queries.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (id, name, email, oauth_provider)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateUserParams struct {
	ID            string
	Name          string
	Email         string
	OauthProvider string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.OauthProvider,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec

DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many

SELECT id, name, email, oauth_provider, is_banned
FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.OauthProvider,
			&i.IsBanned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one

SELECT id, name, email, oauth_provider, is_banned
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.OauthProvider,
		&i.IsBanned,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, name, email, oauth_provider, is_banned
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.OauthProvider,
		&i.IsBanned,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :one

UPDATE users
SET name = $2, email = $3, oauth_provider = $4, is_banned = $5
WHERE id = $1
RETURNING id, name, email, oauth_provider, is_banned
`

type UpdateUserByIdParams struct {
	ID            string
	Name          string
	Email         string
	OauthProvider string
	IsBanned      bool
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserById,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.OauthProvider,
		arg.IsBanned,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.OauthProvider,
		&i.IsBanned,
	)
	return i, err
}
